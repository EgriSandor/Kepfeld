Scheme program elemei:
- kulcsszavak
- változók
- struktúrált formák
- konstansok (számok, karakterek, sztringek, vektorok, listák, egyéb szimbólumok)
- fehér karakterek (szóköz, soremelés)
- megjegyzések

(display "hello")
(newline)

(display 22/7)
(newline)

(display (+ 22/7 1/3))
(newline)

(display 3+2i)
(newline)

(display (+ 3 2))
(newline)

(display '(1 2 3 4))
(newline)

(display (quote (1 2 3 4)))
(newline)

(display (quote 1))
(newline)

(display (quote ()))
(newline)

(display '())
(newline)

(display (+ 3 4))
(newline)
(display '(+ 3 4))
(newline)
(display (quote (+ 3 4)))
(newline)

(display '(1 2 3 4 5))
(newline)
(display '((1 2) (4 5)))
(newline)
(display '(/ (+ 1 2) (- 4 5)))
(newline)

(display 'hello)
(newline)
(display 'quote)
(newline)

(display (car '(1 2 3 4)))
(newline)

(display (cdr '(1 2 3 4)))
(newline)

(display (car '((1 2) (3 4) (5 6))))
(newline)

(display (cdr '((1 2) (3 4) 5 6)))
(newline)


(display (caar '((1 2) (3 4))))
(newline)

(display (cadr '((1 2) (3 4))))
(newline)

(display (cdar '((1 2) (3 4))))
(newline)

(display (cddr '((1 2) (3 4))))
(newline)

nem valódi lista (improper list)

pár (pair)

(display (cons 1 2))
(newline)

(display (cons 'a 'b))
(newline)

(display (cons 'a '()))
(newline)

(display (cons 'a '(b c)))
(newline)

(display (cons '(a b) '(c d)))
(newline)

(display (cons 'a '(b . c)))
(newline)

-------------

(procedure arg1 arg2 ... argn)

(quote (+ 3 4))

(display '(a . (b . (c . ()))))
(newline)

(display (list 'a 'b 'c))
(newline)

(display (list 'a))
(newline)

(display (list))
(newline)

(display ((car (list + - * /)) 3 4))
(newline)

(display (quote (+ 3 4)))
(newline)


--------------
A változók és a "let" kifejezések


(let ((var expr) ...) body1 body2 ...)

(let ((x 2) (y 3)) (+ x y))   =>   5


(display (let ((x 2)) (+ x 3)))
(newline)

(display (let ((y 3)) (+ 2 y)))
(newline)

(display (let ((x 2) (y 3)) (+ x y)))
(newline)

(display (let ((a (* 4 4))) (+ a a)))
(newline)

(display (let ((f +)) (f 2 3)))
(newline)

(display (let ((f +) (x 2) (y 3)) (f x y)))
(newline)

(display (let ((+ *)) (+ 2 3)))
(newline)

(display (let ((+ *) (* +)) (+ (* 2 3) (* 4 5))))
(newline)

(display (+ (* 2 3) (* 4 5)))
(newline)

(display
    (let ((x 1))
         (let ((x (+ x 1)))
              (+ x x))))
(newline)

(display
    (let ((x 1))
         (let ((y (+ x 1)))
              (+ y y))))
(newline)

(display
    (let ((list1 '(a b c)) (list2 '(d e f)))
         (cons (cons (car list1)
                     (car list2))
               (cons (car (cdr list1))
                     (car (cdr list2))))))


---------------

A lambda kifejezések

(lambda (var ...) body1 body2 ...)

(display (let ((x (* 3 4))) (+ x x)))
(newline)

(display (let ((x (/ 99 11))) (+ x x)))
(newline)

(display (let ((x (- 2 7))) (+ x x)))
(newline)

(display (+ (* 3 4) (* 3 4)))
(newline)

(display (lambda (x) (+ x x)))
(newline)

(display ((lambda (x) (+ x x)) 5))
(newline)

(display ((lambda (x) (+ x x)) (+ 2 3)))
(newline)

(display (let ((double (lambda (x) (+ x x))))
              (list (double (* 3 4))
                    (double (/ 99 11))
                    (double (- 2 7)))))
(newline)

(display (let ((double-cons (lambda (x) (cons x x))))
              (list (double-cons 'a)
                    (double-cons 12)
                    (double-cons '(1 2)))))
(newline)

(display (let ((double-any (lambda (f x) (f x x))))
              (list (double-any cons 'a)
                    (double-any + 12))))
(newline)

(display (let ((x 'a))
              (let ((f (lambda (y) (list x y))))
                   (f 'b))))
(newline)

(display (let ((f (let ((x 'sam))
                       (lambda (y z) (list x y z)))))
              (f 'i 'am)))
(newline)


(let ((x 'a)) (cons x x))   ===   ((lambda (x) (cons x x)) 'a)

(let ((var expr) ...) body1 body2 ...)   ===
     ((lambda (var ...) body1 body2 ...) expr ...)

A lambda függvény paraméterlistáját a következő módokon lehet megadni:
- változók egy valódi listájával:     (var1 ... varn)
- egyetlen változóval:                var1
- változók egy nem valódi listájával: (var1 ... varn . varr)

Példák:

(let ((f (lambda x x))) (f 1 2 3 4))                         =>   (1 2 3 4)

(let ((f (lambda x x))) (f))                                 =>   ()

(let ((g (lambda (x . y) (list x y)))) (g 1 2 3 4))          =>   (1 (2 3 4))

(let ((h (lambda (x y . z) (list x y z)))) (h 'a 'b 'c 'd))  =>   (a b (c d))


Külső szintű definíciók

car cdr
c.....r 

cadr

Lambdát tartalmazó define-ok egyszerűsítése:

1. (define var0 (lambda (var1 ... varn) e1 e2 ...))
     ===
   (define (var0 var1 ... varn) e1 e2 ...)

2. (define var0 (lambda varr e1 e2 ...))
     ===
   (define (var0 . varr) e1 e2 ...)

3. (define var0 (lambda (var1 var2 ... varn . varr) e1 e2 ...))
     ===
   (define (var0 var1 var2 ... varn . varr) e1 e2 ...)


(define double-any
  (lambda (f x)
    (f x x)))

(display (double-any + 10))
(newline)

(display (double-any cons 'a))
(newline)

(define xyz '(x y z))

(display xyz)
(newline)
(display (let ((xyz '(z y x))) xyz))
(newline)
(display xyz)
(newline)

(display (list 1 2 3 4))
(newline)

(define mylist (lambda x x))
(display (mylist 1 2 3 4))
(newline)

(define cadr (lambda (x) (car (cdr x))))
(display (cadr '(1 2 3)))
(newline)

(define (cadr x) (car (cdr x)))
(display (cadr '(1 2 3)))
(newline)

(define doubler
  (lambda (f)
    (lambda (x) (f x x))))

(define double (doubler +))
(display (double 13/2))
(newline)

(define double-cons (doubler cons))
(display (double-cons 'a))
(newline)

(define double-any (lambda (f x) ((doubler f) x)))

(display (double-any + 42))
(newline)
(display (double-any cons 'b))
(newline)

A külső szinten lévő függvények definiálásának a sorrendje tetszőleges.

(define proc1
  (lambda (x y)
    (proc2 y x)))

(define proc2 cons)

(display (proc1 'a 'b))
(newline)

Végtelen rekurzió:

(define double-any
  (lambda (f x)
    (f x x)))

(display (double-any double-any double-any))
(newline)



Feltételes kifejezések

(if teszt következmény alternatíva)

Például: (if (< n 0) (- 0 n) n)

;guile 2.0.11

(display (< 2 3))
(newline)

(display (< 5 -1))
(newline)

(define abs
  (lambda (n)
    (if (< n 0)
        (- 0 n)
        n)))

(define abs
  (lambda (n)
    (if (>= n 0)
        n
        (- 0 n))))

(define abs
  (lambda (n)
    (if (not (< n 0))
        n
        (- 0 n))))

(define abs
  (lambda (n)
    (if (or (> n 0) (= n 0))
        n
        (- 0 n))))

(define abs
  (lambda (n)
    (if (= n 0)
        0
        (if (> n 0)
            n
            (- 0 n)))))

(define abs
  (lambda (n)
    ((if (>= n 0) + -)
     0
     n)))

(display (abs -2))
(newline)

(display (abs 0))
(newline)

(display (abs 7))
(newline)


(display (if #t 'true 'false))
(newline)
(display (if #f 'true 'false))
(newline)
(display (if '() 'true 'false))
(newline)
(display (if 'a 'true 'false))
(newline)
(display (if 1 'true 'false))
(newline)
(display (if '(a b c) 'true 'false))
(newline)

(display (not #t))
(newline)
(display (not #f))
(newline)
(display (not "false"))
(newline)

(display (or))
(newline)
(display (or #f))
(newline)
(display (or #f #t 'a))
(newline)
(display (or #f 'a #t))
(newline)


(define reciprocal
  (lambda (n)
    (and (not (= n 0))
         (/ 1 n))))

(display (reciprocal 3))
(newline)

(display (reciprocal 0.25))
(newline)

(display (reciprocal 0))
(newline)


Predikátumok

például: < > <= >= =
         null?
		 eqv? (eq? equal?)
		 pair?
		 number?
		 
(display (null? '()))
(newline)

(display (null? '(1)))
(newline)

(display (null? '(a b c)))
(newline)

(display (null? 'xyz))
(newline)

(display (null? (cdddr '(x y z))))
(newline)


(display (cdr '(a b c)))
(newline)

(display (cdr '(a)))
(newline)

(display (cdr '()))
(newline)

(define my-cdr
  (lambda (lst)
    (if (null? lst)
        '()
        (cdr lst))))

(display (my-cdr '(a b c)))
(newline)

(display (my-cdr '(a)))
(newline)

(display (my-cdr '()))
(newline)


(display (eqv? 'a 'a))
(newline)

(display (eqv? 'a 'b))
(newline)

(display (eqv? #f #f))
(newline)

(display (eqv? #t #t))
(newline)

(display (eqv? #f #t))
(newline)

(display (eqv? 3 3))
(newline)

(display (eqv? 3 2))
(newline)

(display (let ((x "Hello!")) (eqv? x x)))
(newline)

(display (let ((x (cons 'a 'b))) (eqv? x x)))
(newline)

(display (equal? (cons 'a 'b) (cons 'a 'b)))
(newline)


(display (pair? '()))
(newline)

(display (pair? '(a . b)))
(newline)

(display (pair? '(a b c)))
(newline)

(display (pair? 'abc))
(newline)

(display (pair? "Hello!"))
(newline)

(display (pair? 17))
(newline)

(display (pair? (cons 'a (cons 'b (cons 'c '())))))
(newline)

(define reciprocal
  (lambda (n)
    (if (and (number? n) (not (= n 0)))
        (/ 1 n)
        (assertion-violation 'reciprocal "helytelen paraméter" n))))

(display (reciprocal 4.0))
(newline)

(display (reciprocal 4))
(newline)

(display (reciprocal 0))
(newline)

(display (reciprocal 'a))
(newline)


(cond (teszt expr) ... (else expr))

(define sign
  (lambda (n)
    (if (< n 0)
        -1
        (if (> n 0)
            1
            0))))

(define sign
  (lambda (n)
    (cond ((< n 0) -1)
          ((> n 0) 1)
          (else 0))))

(define sign
  (lambda (n)
    (cond ((< n 0) -1)
          ((> n 0) 1)
          ((= n 0) 0))))

(display (sign -5))
(newline)

(display (sign 0))
(newline)

(display (sign 8))
(newline)


Egyszerű rekurzió


(define rec
  (lambda ()
    (rec)))

(trace rec)

(rec)


(display (length '()))
(newline)

(display (length '(a b c)))
(newline)

(define my-length
  (lambda (lst)
    (if (null? lst)
        0
        (+ 1 (my-length (cdr lst))))))

(display (my-length '()))
(newline)

(display (my-length '(a b c)))
(newline)


(list-copy '())        =>    ()
(list-copy '(a b c))   =>    (a b c)


(define list-copy
  (lambda (lst)
    (if (null? lst)
        '()
        (cons (car lst) (list-copy (cdr lst))))))
		
(memv 'a '(a b b c))     =>    (a b b c)
(memv 'b '(a b b c))     =>    (b b c)
(memv 'c '(a b b c))     =>    (c)
(memv 'd '(a b b c))     =>    ()

(remv 'a '(a b b c))     =>    (b b c)
(remv 'b '(a b b c))     =>    (a c)
(remv 'c '(a b b c))     =>    (a b b)
(remv 'd '(a b b c))     =>    (a b b c)


Mapping (leképezés)

(define abs-all
  (lambda (lst)
    (if (null? lst)
        '()
        (cons (abs (car lst))
              (abs-all (cdr lst))))))

(define abs-all
  (lambda (lst)
    (map abs lst)))

(display (abs-all '(1 -2 3 -4 5 -6)))
(newline)

(display (map abs '(1 -2 3 -4 5 -6)))
(newline)

(display (map (lambda (n) (expt n 2)) '(1 -2 3 -4 5 -6)))
(newline)

(display (map (lambda (a b) (+ a b)) '(1 -2 3 -4 5 -6) '(1 -2 3 -4 5 -6)))
(newline)

(display (map cons '(1 -2 3 -4 5 -6) '(1 -2 3 -4 5 -6)))
(newline)


Értékadások

(define abcde '(a b c d e))

(display abcde)
(newline)

(set! abcde (cdr abcde))

(display abcde)
(newline)

(display (let ((abcde '(a b c d e)))
  (set! abcde (reverse abcde))
  abcde))
(newline)

(display abcde)
(newline)


(define quadratic
  (lambda (a b c)
    (let ((root1 0) (root2 0) (minusb 0) (radical 0) (divisor 0))
      (set! minusb (- 0 b))
      (set! radical (sqrt (- (* b b) (* 4 (* a c)))))
      (set! divisor (* 2 a))
      (set! root1 (/ (+ minusb radical) divisor))
      (set! root2 (/ (- minusb radical) divisor))
      (cons root1 root2))))

(define quadratic
  (lambda (a b c)
    (let ((minusb (- 0 b))
          (radical (sqrt (- (* b b) (* 4 (* a c)))))
          (divisor (* 2 a)))
      (let ((root1 (/ (+ minusb radical) divisor))
            (root2 (/ (- minusb radical) divisor)))
        (cons root1 root2)))))

(display (quadratic 1 6 5))
(newline)

(display (quadratic 1 -5 6))
(newline)

(display (quadratic 1 0 1))
(newline)

(define kons-count 0)

(define kons
  (lambda (x y)
    (set! kons-count (+ kons-count 1))
    (cons x y)))

(kons 'a 'b)

(display kons-count)
(newline)

(kons 'a (kons 'b (kons 'c '())))

(display kons-count)
(newline)

(define count
  (let ((next 0))
    (lambda ()
      (let ((v next))
        (set! next (+ next 1))
        v))))

(display (count))
(newline)

(display (count))
(newline)

(define make-counter
  (lambda ()
    (let ((next 0))
      (lambda ()
        (let ((v next))
          (set! next (+ next 1))
          v)))))

(define count1 (make-counter))
(define count2 (make-counter))

(display (count1))
(newline)

(display (count1))
(newline)

(display (count2))
(newline)

(display (count1))
(newline)

(display (count2))
(newline)

(define lazy
  (lambda (t)
    (let ((val #f) (flag #f))
      (lambda ()
        (if (not flag)
            (begin (set! val (t))
                   (set! flag #t)))
        val))))

(define p
  (lazy (lambda ()
          (display "Hoppá!")
          (newline)
          "Ez az!")))

(display (p))
(newline)

(display (p))
(newline)

(display (p))
(newline)

(unless teszt exp1 exp2 ...)

(when teszt exp1 exp2 ...)

(display (let* ((a 5) (b (+ a a)) (c (+ a b)))
           (list a b c)))
(newline)

(display (let ((a 5))
           (let ((b (+ a a)))
             (let ((c (+ a b)))
           (list a b c)))))
(newline)

(display (let ((x 3))
           (unless (= x 0) (set! x (+ x 1)))
           (when (= x 4) (set! x (* x 2)))
           x))
(newline)


(display (let ((sum (lambda (sum lst)
                      (if (null? lst)
                          0
                          (+ (car lst) (sum sum (cdr lst)))))))
           (sum sum '(1 2 3 4 5))))
(newline)

(display (letrec ((sum (lambda (lst)
                      (if (null? lst)
                          0
                          (+ (car lst) (sum (cdr lst)))))))
           (sum '(1 2 3 4 5))))
(newline)


(define factorial
  (lambda (n)
    (let fact ((i n))
      (if (= i 0)
          1
          (* i (fact (- i 1)))))))

(define factorial
  (lambda (n)
    (let fact ((i n) (a 1))
      (if (= i 0)
          a
          (fact (- i 1) (* a i))))))

(display (factorial 0))
(newline)

(display (factorial 1))
(newline)

(display (factorial 2))
(newline)

(display (factorial 3))
(newline)

(display (factorial 10))
(newline)




















































































